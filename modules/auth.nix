# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."auth" = {
    image = "authelia/authelia:latest";
    volumes = [
      "/opt/appdata/authelia:/config:rw"
    ];
    labels = {
      "traefik.enable" = "true";
      "traefik.http.routers.authelia.entryPoints" = "https";
    };
    dependsOn = [
      "mariadb"
      "redis"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=auth"
      "--network=proxy"
    ];
  };
  systemd.services."podman-auth" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-auth-root.target"
    ];
    wantedBy = [
      "podman-compose-auth-root.target"
    ];
  };
  virtualisation.oci-containers.containers."mariadb" = {
    image = "linuxserver/mariadb:latest";
    environment = {
      "MYSQL_DATABASE" = "authelia";
      "MYSQL_PASSWORD" = "YOUR_MYSQL_USER_PASSWORD";
      "MYSQL_ROOT_PASSWORD" = "YOUR_MYSQL_ROOT_PASSWORD";
      "MYSQL_ROOT_USER" = "root";
      "MYSQL_USER" = "authelia";
    };
    volumes = [
      "/opt/appdata/mariadb:/config:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=mariadb"
      "--network=proxy"
    ];
  };
  systemd.services."podman-mariadb" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-auth-root.target"
    ];
    wantedBy = [
      "podman-compose-auth-root.target"
    ];
  };
  virtualisation.oci-containers.containers."redis" = {
    image = "bitnami/redis:latest";
    environment = {
      "REDIS_PASSWORD" = "YOUR_REDIS_PASSWORD";
    };
    volumes = [
      "/opt/appdata/redis:/bitnami:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=redis"
      "--network=proxy"
    ];
  };
  systemd.services."podman-redis" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-auth-root.target"
    ];
    wantedBy = [
      "podman-compose-auth-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-auth-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
